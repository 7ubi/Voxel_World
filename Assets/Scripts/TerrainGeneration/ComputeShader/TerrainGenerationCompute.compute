#pragma kernel CreateBlock

float3 position = float3(0, 0, 0);

struct Vertex
{
    float3 position;
    float3 normal;
    float2 uv;
};

RWStructuredBuffer<Vertex> generated_vertecies;

Vertex generateVertex(float3 position, float3 normal, float2 uv)
{
    Vertex vertex;
    vertex.position = position;
    vertex.normal = normal;
    vertex.uv = uv;

    return vertex;
}

void generateTriangle(int index)
{
    generated_vertecies[index] = generateVertex(position, float3(1, 0, 0), float2(0, 0));
    generated_vertecies[index + 1] = generateVertex(position + float3(1, 0, 0), float3(1, 0, 0), float2(1, 0));
    generated_vertecies[index + 2] = generateVertex(position + float3(0, 1, 0), float3(1, 0, 0), float2(0, 1));
    
    generated_vertecies[index + 3] = generateVertex(position + float3(1, 0, 0), float3(1, 0, 0), float2(1, 0));
    generated_vertecies[index + 4] = generateVertex(position + float3(1, 1, 0), float3(1, 0, 0), float2(1, 1));
    generated_vertecies[index + 5] = generateVertex(position + float3(0, 1, 0), float3(1, 0, 0), float2(0, 1));
}

[numthreads(1,1,1)]
void CreateBlock (uint3 id : SV_DispatchThreadID)
{
    generateTriangle(0);
}
