#pragma kernel CreateBlock

float3 position = float3(0, 0, 0);

struct Vertex
{
    float3 position;
    float3 normal;
    float2 uv;
};

RWStructuredBuffer<Vertex> generated_vertices;
RWStructuredBuffer<int> generated_triangles;

Vertex generate_vertex(const float3 position, const float3 normal, const float2 uv)
{
    Vertex vertex;
    vertex.position = position;
    vertex.normal = normal;
    vertex.uv = uv;

    return vertex;
}

void generate_front(const int start_vertex_index, const int start_triangle_index)
{
    generated_vertices[start_vertex_index] = generate_vertex(position, float3(0, 0, -1), float2(0, 0));
    generated_vertices[start_vertex_index + 1] = generate_vertex(position + float3(1, 0, 0), float3(0, 0, -1), float2(1, 0));
    generated_vertices[start_vertex_index + 2] = generate_vertex(position + float3(0, 1, 0), float3(0, 0, -1), float2(0, 1));
    
    generated_vertices[start_vertex_index + 3] = generate_vertex(position + float3(1, 0, 0), float3(0, 0, -1), float2(1, 0));
    generated_vertices[start_vertex_index + 4] = generate_vertex(position + float3(1, 1, 0), float3(0, 0, -1), float2(1, 1));
    generated_vertices[start_vertex_index + 5] = generate_vertex(position + float3(0, 1, 0), float3(0, 0, -1), float2(0, 1));

    generated_triangles[start_triangle_index] = start_triangle_index;
    generated_triangles[start_triangle_index + 1] = start_triangle_index + 2;
    generated_triangles[start_triangle_index + 2] = start_triangle_index + 1;
    generated_triangles[start_triangle_index + 3] = start_triangle_index + 3;
    generated_triangles[start_triangle_index + 4] = start_triangle_index + 5;
    generated_triangles[start_triangle_index + 5] = start_triangle_index + 4;
}

[numthreads(8,1,1)]
void CreateBlock (uint3 id : SV_DispatchThreadID)
{
    generate_front(0, 0);
}
