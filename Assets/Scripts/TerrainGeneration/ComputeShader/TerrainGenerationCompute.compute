#pragma kernel create_chunk
#include "Noise.compute"
#include "BlockGeneration.compute"

#define SCALE 200.0
#define SCALE_3D 50.0
#define THRESHOLD 0.8

float4 offset;
float min_height;
float max_height;
int chunk_size;

RWStructuredBuffer<vertex> generated_vertices;
RWStructuredBuffer<int> generated_triangles;
RWStructuredBuffer<int> block_ids;


int get_1d_index_from_3d(int x, int y, int z)
{
    x++;
    y++;
    z++;
    return (z * (chunk_size + 2) * (max_height + 2)) + (y * (chunk_size + 2)) + x;
}

float map(const float value, const float min1, const float max1, const float min2, const float max2)
{
    return (value - min1) / (max1 - min1) * (max2 - min2) + min2;
}

int get_height(const int x, const int z)
{
    const float mapped_noise_value
    = map(snoise(float2((x + offset.x) / SCALE, (z + offset.z) / SCALE)), -1, 1, 0, 1); 
    return int(mapped_noise_value * (max_height - min_height) + min_height);
}

float snoise_mapped(const int x, const int y, const int z)
{
    return map(snoise(float3((x + offset.x) / SCALE_3D, y / SCALE_3D, (z + offset.z) / SCALE_3D)),-1, 1, 0, 1);
}

void generate_chunk_block_ids()
{
    for(int x = -1; x <= chunk_size; x++)
    {
        for(int z = -1; z <= chunk_size; z++)
        {
            for(int y = -1; y <= max_height; y++)
            {
                if(y < get_height(x, z))
                {
                    if(y < 3 || snoise_mapped(x, y, z) < THRESHOLD)
                    {
                        block_ids[get_1d_index_from_3d(x, y, z)] = 1;
                        continue;
                    }
                }
                block_ids[get_1d_index_from_3d(x, y, z)] = 0;
            }
        }
    }
}

void generate_vertices()
{
    for(int x = 0; x < chunk_size; x++)
    {
        for(int y = 0; y < max_height; y++)
        {
            for(int z = 0; z < chunk_size; z++)
            {
                if(block_ids[get_1d_index_from_3d(x, y, z)] == 1)
                {
                    const float3 pos = float3(x, y, z);
                    if(block_ids[get_1d_index_from_3d(x - 1, y, z)] == 0) {
                        generate_left(pos, generated_vertices, generated_triangles);
                    }
                    
                    if(block_ids[get_1d_index_from_3d(x + 1, y, z)] == 0) {
                        generate_right(pos, generated_vertices, generated_triangles);
                    }

                    if(block_ids[get_1d_index_from_3d(x, y - 1, z)] == 0) {
                        generate_bottom(pos, generated_vertices, generated_triangles);
                    }
                    
                    if(block_ids[get_1d_index_from_3d(x, y + 1, z)] == 0) {
                        generate_top(pos, generated_vertices, generated_triangles);
                    }

                    if(block_ids[get_1d_index_from_3d(x, y, z - 1)] == 0) {
                        generate_front(pos, generated_vertices, generated_triangles);
                    }
                    
                    if(block_ids[get_1d_index_from_3d(x, y, z + 1)] == 0) {
                        generate_back(pos, generated_vertices, generated_triangles);
                    }
                }
            }
        }
    }
}

[numthreads(8,1,1)]
void create_chunk (uint3 id : SV_DispatchThreadID)
{
    generate_chunk_block_ids();
    generate_vertices();
}
