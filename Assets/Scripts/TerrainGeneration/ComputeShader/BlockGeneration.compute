#pragma once

#include "Vertex.compute"

int current_index = 0;

vertex generate_vertex(const float3 position, const float3 normal, const float2 uv)
{
    vertex vertex;
    vertex.position = position;
    vertex.normal = normal;
    vertex.uv = uv;

    return vertex;
}

void generate_triangles(RWStructuredBuffer<int> generated_triangles)
{
    generated_triangles[current_index] = current_index;
    generated_triangles[current_index + 1] = current_index + 2;
    generated_triangles[current_index + 2] = current_index + 1;
    generated_triangles[current_index + 3] = current_index + 3;
    generated_triangles[current_index + 4] = current_index + 5;
    generated_triangles[current_index + 5] = current_index + 4;
}

void generate_front(const float3 position, RWStructuredBuffer<vertex> generated_vertices, RWStructuredBuffer<int> generated_triangles)
{
    const float3 forward = float3(0, 0, -1);
    
    generated_vertices[current_index] = generate_vertex(position, forward, float2(0, 0));
    generated_vertices[current_index + 1] = generate_vertex(position + float3(1, 0, 0), forward, float2(1, 0));
    generated_vertices[current_index + 2] = generate_vertex(position + float3(0, 1, 0), forward, float2(0, 1));
    
    generated_vertices[current_index + 3] = generate_vertex(position + float3(1, 0, 0), forward, float2(1, 0));
    generated_vertices[current_index + 4] = generate_vertex(position + float3(1, 1, 0), forward, float2(1, 1));
    generated_vertices[current_index + 5] = generate_vertex(position + float3(0, 1, 0), forward, float2(0, 1));

    generate_triangles(generated_triangles);
    current_index += 6;
}

void generate_back(const float3 position, RWStructuredBuffer<vertex> generated_vertices, RWStructuredBuffer<int> generated_triangles)
{
    const float3 back = float3(0, 0, 1);
    
    generated_vertices[current_index] = generate_vertex(position + float3(1, 0, 1), back, float2(0, 0));
    generated_vertices[current_index + 1] = generate_vertex(position + float3(0, 0, 1), back, float2(1, 0));
    generated_vertices[current_index + 2] = generate_vertex(position + float3(1, 1, 1), back, float2(0, 1));
    
    generated_vertices[current_index + 3] = generate_vertex(position + float3(0, 0, 1), back, float2(1, 0));
    generated_vertices[current_index + 4] = generate_vertex(position + float3(0, 1, 1), back, float2(1, 1));
    generated_vertices[current_index + 5] = generate_vertex(position + float3(1, 1, 1), back, float2(0, 1));

    generate_triangles(generated_triangles);
    current_index += 6;
}

void generate_top(const float3 position, RWStructuredBuffer<vertex> generated_vertices, RWStructuredBuffer<int> generated_triangles)
{
    const float3 up = float3(0, 1, 0);
    
    generated_vertices[current_index] = generate_vertex(position + float3(0, 1, 0), up, float2(0, 0));
    generated_vertices[current_index + 1] = generate_vertex(position + float3(1, 1, 0), up, float2(1, 0));
    generated_vertices[current_index + 2] = generate_vertex(position + float3(0, 1, 1), up, float2(0, 1));
    
    generated_vertices[current_index + 3] = generate_vertex(position + float3(1, 1, 0), up, float2(1, 0));
    generated_vertices[current_index + 4] = generate_vertex(position + float3(1, 1, 1), up, float2(1, 1));
    generated_vertices[current_index + 5] = generate_vertex(position + float3(0, 1, 1), up, float2(0, 1));

    generate_triangles(generated_triangles);
    current_index += 6;
}

void generate_bottom(const float3 position, RWStructuredBuffer<vertex> generated_vertices, RWStructuredBuffer<int> generated_triangles)
{
    const float3 down = float3(0, -1, 0);
    
    generated_vertices[current_index] = generate_vertex(position + float3(0, 0, 1), down, float2(0, 0));
    generated_vertices[current_index + 1] = generate_vertex(position + float3(1, 0, 1), down, float2(1, 0));
    generated_vertices[current_index + 2] = generate_vertex(position + float3(0, 0, 0), down, float2(0, 1));
    
    generated_vertices[current_index + 3] = generate_vertex(position + float3(1, 0, 1), down, float2(1, 0));
    generated_vertices[current_index + 4] = generate_vertex(position + float3(1, 0, 0), down, float2(1, 1));
    generated_vertices[current_index + 5] = generate_vertex(position + float3(0, 0, 0), down, float2(0, 1));

    generate_triangles(generated_triangles);
    current_index += 6;
}

void generate_left(const float3 position, RWStructuredBuffer<vertex> generated_vertices, RWStructuredBuffer<int> generated_triangles)
{
    const float3 left = float3(-1, 0, 0);
    
    generated_vertices[current_index] = generate_vertex(position + float3(0, 0, 1), left, float2(0, 0));
    generated_vertices[current_index + 1] = generate_vertex(position + float3(0, 0, 0), left, float2(1, 0));
    generated_vertices[current_index + 2] = generate_vertex(position + float3(0, 1, 1), left, float2(0, 1));
    
    generated_vertices[current_index + 3] = generate_vertex(position + float3(0, 0, 0), left, float2(1, 0));
    generated_vertices[current_index + 4] = generate_vertex(position + float3(0, 1, 0), left, float2(1, 1));
    generated_vertices[current_index + 5] = generate_vertex(position + float3(0, 1, 1), left, float2(0, 1));

    generate_triangles(generated_triangles);
    current_index += 6;
}

void generate_right(const float3 position, RWStructuredBuffer<vertex> generated_vertices, RWStructuredBuffer<int> generated_triangles)
{
    const float3 right = float3(1, 0, 0);
    
    generated_vertices[current_index] = generate_vertex(position + float3(1, 0, 0), right, float2(0, 0));
    generated_vertices[current_index + 1] = generate_vertex(position + float3(1, 0, 1), right, float2(1, 0));
    generated_vertices[current_index + 2] = generate_vertex(position + float3(1, 1, 0), right, float2(0, 1));
    
    generated_vertices[current_index + 3] = generate_vertex(position + float3(1, 0, 1), right, float2(1, 0));
    generated_vertices[current_index + 4] = generate_vertex(position + float3(1, 1, 1), right, float2(1, 1));
    generated_vertices[current_index + 5] = generate_vertex(position + float3(1, 1, 0), right, float2(0, 1));

    generate_triangles(generated_triangles);
     current_index += 6;
}